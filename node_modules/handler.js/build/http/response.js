"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var escape = require("escape-html");
var lodash_1 = require("lodash");
var statuses = require("statuses");
var _body = new WeakMap();
var _context = new WeakMap();
var _headers = new WeakMap();
var _status = new WeakMap();
var _type = new WeakMap();
var HTTPResponse = (function () {
    function HTTPResponse(options) {
        _context.set(this, options.context);
        _headers.set(this, {});
    }
    HTTPResponse.prototype.append = function (field, values) {
        if (lodash_1.isString(values)) {
            values = [values];
        }
        if (!this.headers[field]) {
            this.headers[field] = [];
        }
        this.headers[field] = this.headers[field].concat(values);
    };
    Object.defineProperty(HTTPResponse.prototype, "body", {
        get: function () {
            return _body.get(this);
        },
        set: function (value) {
            _body.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTTPResponse.prototype, "headers", {
        get: function () {
            return _headers.get(this);
        },
        enumerable: true,
        configurable: true
    });
    HTTPResponse.prototype.get = function (field) {
        return this.headers[field][0];
    };
    // Perform a [302] redirect to url.
    // The string "back" is special-cased to provide Referrer support,
    // when Referrer is not present alt or "/" is used.
    //
    // To alter the default status of 302, simply assign the status before or after this call.
    // To alter the body, assign it after this call.
    HTTPResponse.prototype.redirect = function (url, alt) {
        var ctx = _context.get(this);
        // location
        if ('back' === url) {
            url = ctx.req.get('Referrer') || alt || '/';
        }
        this.set('Location', url);
        // status
        if (!statuses.redirect[this.status]) {
            this.status = 302;
        }
        // html
        if (ctx.req.accepts('html')) {
            url = escape(url);
            this.type = 'text/html; charset=utf-8';
            this.body = "Redirecting to <a href=\"" + url + "\">" + url + "</a>.";
            return;
        }
        // text
        this.type = 'text/plain; charset=utf-8';
        this.body = "Redirecting to " + url + ".";
    };
    HTTPResponse.prototype.remove = function (field) {
        delete this.headers[field];
    };
    HTTPResponse.prototype.set = function (field, value) {
        this.headers[field] = [value];
    };
    Object.defineProperty(HTTPResponse.prototype, "status", {
        get: function () {
            return _status.get(this);
        },
        set: function (code) {
            _status.set(this, code);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTTPResponse.prototype, "type", {
        get: function () {
            return _type.get(this);
        },
        set: function (value) {
            _type.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    // Inspect implementation.
    HTTPResponse.prototype.inspect = function () {
        var o = this.toJSON();
        o.body = this.body;
        return o;
    };
    // Return JSON representation.
    HTTPResponse.prototype.toJSON = function () {
        return {
            headers: this.headers,
            status: this.status,
        };
    };
    return HTTPResponse;
}());
exports.HTTPResponse = HTTPResponse;
