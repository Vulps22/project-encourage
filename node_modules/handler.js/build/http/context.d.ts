import { HTTPRequestHeaders } from './header';
import { HTTPRequest } from './request';
import { HTTPResponse } from './response';
export interface HTTPContextOptions {
    body: any;
    context?: any;
    headers?: any;
    method: string;
    params?: any;
    path: string;
    proxy?: boolean;
    query?: any;
    subdomainOffset?: number;
}
export declare class HTTPContext {
    constructor(options: HTTPContextOptions);
    readonly req: HTTPRequest;
    readonly res: HTTPResponse;
    accepts(...types: any[]): string | string[] | boolean;
    acceptsCharsets(...charsets: any[]): string | string[] | boolean;
    acceptsEncodings(...encodings: any[]): string | string[] | boolean;
    acceptsLanguages(...langs: any[]): string | string[] | boolean;
    get(field: string): string;
    readonly headers: HTTPRequestHeaders;
    readonly host: string;
    readonly hostname: string;
    readonly ip: string;
    readonly ips: string[];
    is(types: string[]): boolean;
    method: string;
    params: any;
    readonly path: string;
    readonly protocol: string;
    readonly query: any;
    readonly secure: boolean;
    readonly subdomains: string[];
    url: string;
    append(field: string, values: string | string[]): void;
    body: any;
    redirect(url: string, alt?: string): void;
    remove(field: string): void;
    set(field: string, value: string): void;
    status: number;
    type: string;
    assert(value: boolean, msg: string, status?: number): void;
    throw(msg: string, status?: number): void;
    inspect(): {
        path: string;
        req: any;
        res: any;
    };
    toJSON(): {
        path: string;
        req: any;
        res: any;
    };
}
