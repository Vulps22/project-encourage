import { Application, RoutePath } from '../app';
import { HTTPContext, HTTPContextOptions } from './context';
import { HTTPHandler } from './handler';
export interface HTTPRouteMatch {
    handler: HTTPHandler;
    params: {};
}
export declare class HTTPApplication extends Application {
    use(handler: HTTPHandler): HTTPApplication;
    all(path: RoutePath, ...handlers: HTTPHandler[]): HTTPApplication;
    delete(path: RoutePath, ...handlers: HTTPHandler[]): HTTPApplication;
    get(path: RoutePath, ...handlers: HTTPHandler[]): HTTPApplication;
    head(path: RoutePath, ...handlers: HTTPHandler[]): HTTPApplication;
    options(path: RoutePath, ...handlers: HTTPHandler[]): HTTPApplication;
    patch(path: RoutePath, ...handlers: HTTPHandler[]): HTTPApplication;
    post(path: RoutePath, ...handlers: HTTPHandler[]): HTTPApplication;
    put(path: RoutePath, ...handlers: HTTPHandler[]): HTTPApplication;
    run(options: HTTPContextOptions): Promise<HTTPContext>;
    protected _matchRoute(method: string, path: string): HTTPRouteMatch[];
}
