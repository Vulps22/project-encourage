"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var httpAssert = require("http-assert");
var httpErrors = require("http-errors");
var request_1 = require("./request");
var response_1 = require("./response");
var _request = new WeakMap();
var _response = new WeakMap();
var HTTPContext = (function () {
    function HTTPContext(options) {
        var req = new request_1.HTTPRequest({
            body: options.body,
            context: this,
            headers: options.headers,
            method: options.method,
            params: options.params,
            path: options.path,
            proxy: options.proxy,
            query: options.query,
            subdomainOffset: options.subdomainOffset,
        });
        _request.set(this, req);
        var res = new response_1.HTTPResponse({
            context: this,
        });
        _response.set(this, res);
    }
    Object.defineProperty(HTTPContext.prototype, "req", {
        get: function () {
            return _request.get(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTTPContext.prototype, "res", {
        get: function () {
            return _response.get(this);
        },
        enumerable: true,
        configurable: true
    });
    // Request delegates
    HTTPContext.prototype.accepts = function () {
        var types = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            types[_i] = arguments[_i];
        }
        return (_a = this.req).accepts.apply(_a, types);
        var _a;
    };
    HTTPContext.prototype.acceptsCharsets = function () {
        var charsets = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            charsets[_i] = arguments[_i];
        }
        return (_a = this.req).acceptsCharsets.apply(_a, charsets);
        var _a;
    };
    HTTPContext.prototype.acceptsEncodings = function () {
        var encodings = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            encodings[_i] = arguments[_i];
        }
        return (_a = this.req).acceptsEncodings.apply(_a, encodings);
        var _a;
    };
    HTTPContext.prototype.acceptsLanguages = function () {
        var langs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            langs[_i] = arguments[_i];
        }
        return (_a = this.req).acceptsLanguages.apply(_a, langs);
        var _a;
    };
    HTTPContext.prototype.get = function (field) {
        return this.req.get(field);
    };
    Object.defineProperty(HTTPContext.prototype, "headers", {
        get: function () {
            return this.req.headers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTTPContext.prototype, "host", {
        get: function () {
            return this.req.host;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTTPContext.prototype, "hostname", {
        get: function () {
            return this.req.hostname;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTTPContext.prototype, "ip", {
        get: function () {
            return this.req.ip;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTTPContext.prototype, "ips", {
        get: function () {
            return this.req.ips;
        },
        enumerable: true,
        configurable: true
    });
    HTTPContext.prototype.is = function (types) {
        return this.req.is(types);
    };
    Object.defineProperty(HTTPContext.prototype, "method", {
        get: function () {
            return this.req.method;
        },
        set: function (value) {
            this.req.method = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTTPContext.prototype, "params", {
        get: function () {
            return this.req.params;
        },
        set: function (value) {
            this.req.params = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTTPContext.prototype, "path", {
        get: function () {
            return this.req.path;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTTPContext.prototype, "protocol", {
        get: function () {
            return this.req.protocol;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTTPContext.prototype, "query", {
        get: function () {
            return this.req.query;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTTPContext.prototype, "secure", {
        get: function () {
            return this.req.secure;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTTPContext.prototype, "subdomains", {
        get: function () {
            return this.req.subdomains;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTTPContext.prototype, "url", {
        get: function () {
            return this.req.url;
        },
        set: function (value) {
            this.req.url = value;
        },
        enumerable: true,
        configurable: true
    });
    // Response delegates
    HTTPContext.prototype.append = function (field, values) {
        return this.res.append(field, values);
    };
    Object.defineProperty(HTTPContext.prototype, "body", {
        get: function () {
            return this.res.body;
        },
        set: function (value) {
            this.res.body = value;
        },
        enumerable: true,
        configurable: true
    });
    HTTPContext.prototype.redirect = function (url, alt) {
        return this.res.redirect(url, alt);
    };
    HTTPContext.prototype.remove = function (field) {
        return this.res.remove(field);
    };
    HTTPContext.prototype.set = function (field, value) {
        return this.res.set(field, value);
    };
    Object.defineProperty(HTTPContext.prototype, "status", {
        get: function () {
            return this.res.status;
        },
        set: function (code) {
            this.res.status = code;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTTPContext.prototype, "type", {
        get: function () {
            return this.res.type;
        },
        set: function (value) {
            this.res.type = value;
        },
        enumerable: true,
        configurable: true
    });
    // Similar to .throw(), adds assertion.
    HTTPContext.prototype.assert = function (value, msg, status) {
        if (status === void 0) { status = 500; }
        httpAssert(value, status, msg);
    };
    // Throw an error with `msg` and optional `status` defaulting to 500.
    // Note that these are user-level errors, and the message may be exposed to the client.
    HTTPContext.prototype.throw = function (msg, status) {
        if (status === void 0) { status = 500; }
        throw httpErrors(status, msg);
    };
    // util.inspect() implementation, which just returns the JSON output.
    HTTPContext.prototype.inspect = function () {
        return this.toJSON();
    };
    // Return JSON representation.
    //
    // Here we explicitly invoke .toJSON() on each object, as iteration will otherwise fail due
    // to the getters and cause utilities such as clone() to fail.
    HTTPContext.prototype.toJSON = function () {
        return {
            path: this.req.path,
            req: this.req.toJSON(),
            res: this.res.toJSON(),
        };
    };
    return HTTPContext;
}());
exports.HTTPContext = HTTPContext;
